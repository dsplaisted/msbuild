<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="DeployDependencies" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="..\dir.props" />

  <UsingTask TaskName="PrereleaseResolveNuGetPackageAssets" AssemblyFile="$(ToolsDir)Microsoft.DotNet.Build.Tasks.dll"/>

  <PropertyGroup>
    <RuntimeProjectJson>$(MSBuildThisFileDirectory)\runtime.project.json</RuntimeProjectJson>
    <RuntimeProjectLockJson>$(MSBuildThisFileDirectory)\runtime.project.lock.json</RuntimeProjectLockJson>
    <RestoreRuntimePackagesCommand>"$(NuGetToolPath)" restore $(RuntimeProjectJson) -Verbosity detailed</RestoreRuntimePackagesCommand>
    <RestoreRuntimePackagesCommand Condition="'$(OsEnvironment)'!='Windows_NT' and '$(MonoBuild)' == 'true'">MONO_THREADS_PER_CPU=2000 mono $(RestoreRuntimePackagesCommand)</RestoreRuntimePackagesCommand>
    <NuGetRuntimeIdentifier>$(RuntimeSystem)-$(RuntimeArchitecture)</NuGetRuntimeIdentifier>
  </PropertyGroup>

  <Target Name="RestoreRuntimePackages"
          Inputs="$(NuGetToolPath);$(RuntimeProjectJson)"
          Outputs="$(RuntimeProjectLockJson)"
          >
    <Exec Condition="'$(OsEnvironment)'=='Windows_NT'" Command="$(RestoreRuntimePackagesCommand)" StandardOutputImportance="Low" />
    <!-- Work around https://github.com/Microsoft/msbuild/issues/262 by running restore
         a second time to get the correct .lock.json file in place.  This is inefficient
         but shouldn't take too long since the packages should all already be downloaded. -->
    <Exec Command="$(RestoreRuntimePackagesCommand)" StandardOutputImportance="Low" />

    <!-- It appears that NuGet doesn't re-write the project.lock.json file if the contents would be the same. This can mess up incremental builds
        if you make a non-significant change to project.json.  To avoid that, update the timestamp of the lock file here. -->
    <Touch Files="$(RuntimeProjectLockJson)" />
  </Target>

  <Target Name="DeployRuntime"
          DependsOnTargets="RestoreRuntimePackages"
          >
    <PrereleaseResolveNuGetPackageAssets AllowFallbackOnTargetSelection="false"
                               IncludeFrameworkReferences="false"
                               NuGetPackagesDirectory=""
                               RuntimeIdentifier="$(NuGetRuntimeIdentifier)"
                               ProjectLanguage="cs"
                               ProjectLockFile="$(RuntimeProjectLockJson)"
                               TargetMonikers="$(NuGetTargetMoniker)">

      <!--<Output TaskParameter="ResolvedAnalyzers" ItemName="Analyzer" />-->
      <Output TaskParameter="ResolvedCopyLocalItems" ItemName="ResolvedRuntimeFiles" />
      <!--<Output TaskParameter="ResolvedReferences" ItemName="_ReferencesFromNuGetPackages" />
      <Output TaskParameter="ReferencedPackages" ItemName="ReferencedNuGetPackages" />-->
    </PrereleaseResolveNuGetPackageAssets>

    <!-- Copy the dependencies to both the deployment and the test directories -->

    <Copy SourceFiles="@(ResolvedRuntimeFiles)"
          DestinationFiles="@(ResolvedRuntimeFiles->'$(DeploymentDir)\%(DestinationSubDirectory)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          />

    <Copy SourceFiles="@(ResolvedRuntimeFiles)"
          DestinationFiles="@(ResolvedRuntimeFiles->'$(TestDeploymentDir)\%(DestinationSubDirectory)%(Filename)%(Extension)')"
          SkipUnchangedFiles="true"
          />
  </Target>

  <Target Name="DeployDependencies"
          DependsOnTargets="DeployRuntime" />

</Project>
