<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    $(OS) is set to Unix/Windows_NT. This comes from an environment variable on Windows and MSBuild on Unix.
    Possible Values: Windows_NT / Unix / OSX
  -->
  <PropertyGroup>
    <OsEnvironment Condition="'$(OsEnvironment)'==''">$(OS)</OsEnvironment>
    <TargetPlatformIdentifier Condition="'$(TargetPlatformIdentifier)'==''">$(OS)</TargetPlatformIdentifier>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFrameworkVersion>v4.5.1</TargetFrameworkVersion>
    <!-- This is to workaround an issue with a dependent assembly (Microsoft.Build.Tasks.CodeAnalysis.dll)
         copying its dependencies (which are in the GAC). -->
    <DoNotCopyLocalIfInGac>true</DoNotCopyLocalIfInGac>
  </PropertyGroup>

   <!-- Compiler config -->
   <PropertyGroup>
     <UseRoslynCompilers>true</UseRoslynCompilers>
     <DebugSymbols Condition="'$(UseRoslynCompilers)' == 'true'">false</DebugSymbols>
  </PropertyGroup>

   <!-- Common repo directories -->
  <PropertyGroup>
    <CompilerToolsVersion>1.2.0-beta-20151112-01</CompilerToolsVersion>
    <NuSpecReferenceGeneratorVersion>1.3.1</NuSpecReferenceGeneratorVersion>
    <XunitVersion>2.1.0</XunitVersion>
    <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>
    <SourceDir>$(RepoRoot)src$([System.IO.Path]::DirectorySeparatorChar)</SourceDir>
    <SamplesDir>$(RepoRoot)Samples$([System.IO.Path]::DirectorySeparatorChar)</SamplesDir>
    <DnxDir Condition="'$(OsEnvironment)'=='Windows_NT'">dnx-coreclr-win-x86</DnxDir>
    <DnxVersion Condition="'$(OsEnvironment)'=='Windows_NT'">1.0.0-beta8</DnxVersion>
    <DnxDir Condition="'$(OsEnvironment)'=='Unix'">dnx-coreclr-linux-x64</DnxDir>
    <DnxVersion Condition="'$(OsEnvironment)'=='Unix'">1.0.0-beta8</DnxVersion>
    <DnxDir Condition="'$(OsEnvironment)'=='OSX'">dnx-coreclr-darwin-x64</DnxDir>
    <DnxVersion Condition="'$(OsEnvironment)'=='OSX'">1.0.0-rc2-16177</DnxVersion>

    <!-- Output directories -->
    <BinDir>$(RepoRoot)bin$([System.IO.Path]::DirectorySeparatorChar)</BinDir>
    <TestWorkingDir>$(BinDir)tests$([System.IO.Path]::DirectorySeparatorChar)</TestWorkingDir>

    <!-- Input Directories -->
    <PackagesDir>$(RepoRoot)packages$([System.IO.Path]::DirectorySeparatorChar)</PackagesDir>

    <!-- NuSpec.ReferenceGenerator targets use SolutionDir -->
    <SolutionDir>$(SourceDir)</SolutionDir>

    <DnuToolDir Condition="'$(OsEnvironment)'!='Windows_NT'">$([System.IO.Path]::Combine($(PackagesDir), "$(DnxDir).$(DnxVersion)"))</DnuToolDir>
    <DnuToolPath Condition="'$(OsEnvironment)'=='Windows_NT'">$([System.IO.Path]::Combine($(DnuToolDir), "bin", "dnu.cmd"))</DnuToolPath>
    <DnuToolPath Condition="'$(OsEnvironment)'!='Windows_NT'">$([System.IO.Path]::Combine($(DnuToolDir), "bin", "dnu"))</DnuToolPath>

  </PropertyGroup>

  <PropertyGroup>
    <BuildToolsRuntime>net46</BuildToolsRuntime>
    <ToolsDir>$([System.IO.Path]::Combine($(PackagesDir),"Microsoft.DotNet.BuildTools",$(BuildToolsRuntime)))$([System.IO.Path]::DirectorySeparatorChar)</ToolsDir>
    <CompilerToolsDir>$([System.IO.Path]::Combine($(PackagesDir)Microsoft.Net.Compilers.$(CompilerToolsVersion),"tools"))$([System.IO.Path]::DirectorySeparatorChar)</CompilerToolsDir>
    <NuSpecReferenceGeneratorDir>$([System.IO.Path]::Combine($(PackagesDir)NuSpec.ReferenceGenerator.$(NuSpecReferenceGeneratorVersion),"build", "dotnet"))$([System.IO.Path]::DirectorySeparatorChar)</NuSpecReferenceGeneratorDir>

    <BootstrapDestination>$(BinDir)Bootstrap$([System.IO.Path]::DirectorySeparatorChar)</BootstrapDestination>
  </PropertyGroup>

  <!-- If we're building with a bootstrapped MSBuild, use fresh extensions instead of the installed ones. -->
  <PropertyGroup Condition="'$(BootstrappedMSBuild)' == 'true'">
    <MSBuildExtensionsPath>$(BootstrapDestination)</MSBuildExtensionsPath>
  </PropertyGroup>

  <!-- Common nuget properties -->
  <PropertyGroup>
    <NuGetDir>$(PackagesDir)</NuGetDir>
    <NuGetConfigDir>$([System.IO.Path]::Combine($(SourceDir),".nuget"))</NuGetConfigDir>
    <GlobalPropertiesFile>$(MSBuildThisFileFullPath)</GlobalPropertiesFile>
    <NuGetToolPath Condition="'$(NuGetToolPath)'==''">$([System.IO.Path]::Combine($(NuGetDir), "NuGet.exe"))</NuGetToolPath>
  </PropertyGroup>

  <!-- Copy the "_._" file to the output directory, which is used by the NuSpecs to indicate an empty folder -->
  <ItemGroup>
    <None Include="$(SourceDir)\nuget\_._">
      <Link>_._</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Visible>False</Visible>
    </None>
  </ItemGroup>

  <!-- Set default Configuration and Platform -->
  <PropertyGroup>
    <Platform Condition="'$(Platform)'==''">AnyCPU</Platform>
    <DefineConstants>$(DefineConstants);TRACE;STANDALONEBUILD</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' ==''">
    <Configuration Condition="'$(OS)' == 'Windows_NT'">Debug</Configuration>
    <Configuration Condition="'$(OS)' != 'Windows_NT'">Debug-MONO</Configuration>
  </PropertyGroup>

  <!-- Setup Default symbol and optimization for Configuration -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
    <MsbuildDebugger>true</MsbuildDebugger>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Debug-MONO'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
    <MonoBuild>true</MonoBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">pdbonly</DebugType>
    <MsbuildDebugger>true</MsbuildDebugger>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release-MONO'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">pdbonly</DebugType>
    <MonoBuild>true</MonoBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Debug-NetCore'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
    <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>
    <NetCoreBuild>true</NetCoreBuild>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release-NetCore'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">true</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">pdbonly</DebugType>
    <NetCoreBuild>true</NetCoreBuild>
  </PropertyGroup>

  <!-- Set the host specific OS and Architecture variables -->
  <PropertyGroup>
    <!-- Possible Values: win7 / ubuntu14.04 / osx.10.10 -->
    <RuntimeSystem Condition="'$(TargetPlatformIdentifier)' == 'Windows_NT'">win7</RuntimeSystem>
    <RuntimeSystem Condition="'$(TargetPlatformIdentifier)' == 'Unix'">ubuntu.14.04</RuntimeSystem>
    <RuntimeSystem Condition="'$(TargetPlatformIdentifier)' == 'OSX'">osx.10.10</RuntimeSystem>

    <!-- Possible Values: Windows, Ubuntu, OSX, MONO. Append _NetCore if Configuration is net core -->
    <TargetSystem Condition="'$(TargetPlatformIdentifier)' == 'Windows_NT'">Windows</TargetSystem>
    <TargetSystem Condition="'$(TargetPlatformIdentifier)' == 'Unix'">Ubuntu</TargetSystem>
    <TargetSystem Condition="'$(TargetPlatformIdentifier)' == 'OSX'">OSX</TargetSystem>
    <TargetSystem Condition="'$(MonoBuild)' == 'true'">MONO</TargetSystem>
    <TargetSystem Condition="'$(NetCoreBuild)' == 'true'">$(TargetSystem)_NetCore</TargetSystem>

    <RuntimeArchitecture>x64</RuntimeArchitecture>
  </PropertyGroup>

  <PropertyGroup>
    <PlatformTarget>$(RuntimeArchitecture)</PlatformTarget>
    <ImportGetNuGetPackageVersions Condition="'$(OS)' != 'Windows_NT'">false</ImportGetNuGetPackageVersions>
    <NuGetTargetMoniker Condition="'$(NetCoreBuild)' == 'true'">DNXCore,Version=v5.0</NuGetTargetMoniker>
    <NuGetTargetMoniker Condition="'$(MonoBuild)' == 'true'">.NETFramework,Version=v4.5.1</NuGetTargetMoniker>
    <NuGetTargetMoniker Condition="'$(NetCoreBuild)' != 'true' and '$(MonoBuild)' != 'true'">.NETFramework,Version=v4.6</NuGetTargetMoniker>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
    <DebugType/>
    <DebugSymbols>false</DebugSymbols>
  </PropertyGroup>

  <!-- This configuration builds against the full .NET Framework but with the compilation constants to compile against
       the .NET Core surface area.  This way we can build a binary to run ApiPort on to measure progress. -->
  <PropertyGroup Condition="'$(Configuration)' == 'Port-Progress'">
    <DebugSymbols Condition="'$(DebugSymbols)' == ''">true</DebugSymbols>
    <Optimize Condition="'$(Optimize)' == ''">false</Optimize>
    <DebugType Condition="'$(DebugType)' == ''">full</DebugType>
    <DefineConstants>$(DefineConstants);DEBUG;TRACE;STANDALONEBUILD</DefineConstants>
    <NetCoreSurface>true</NetCoreSurface>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
  </PropertyGroup>

  <!-- .NET Core build support -->
  <PropertyGroup Condition="'$(NetCoreBuild)' != 'true'">
    <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">v4.5.1</TargetFrameworkVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(NetCoreBuild)' == 'true'">
    <TargetFrameworkVersion>v5.0</TargetFrameworkVersion>
    <TargetFrameworkIdentifier>DNXCore</TargetFrameworkIdentifier>
    <NetCoreSurface>true</NetCoreSurface>

    <!-- Setting this to false stops the AppX targets, which aren't supported on .NET Core, from beeing imported -->
    <WindowsAppContainer>false</WindowsAppContainer>

    <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE</DefineConstants>

  </PropertyGroup>

  <PropertyGroup Condition="'$(NetCoreSurface)' != 'true'">
    <DefineConstants>$(DefineConstants);FEATURE_APARTMENT_STATE</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_APM</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_APPDOMAIN</DefineConstants>
    <FeatureAppDomain Condition="'$(MonoBuild)' != 'true'">true</FeatureAppDomain>
    <DefineConstants>$(DefineConstants);FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_LOADFROM</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_LOCATION</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLYNAME_CULTUREINFO</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLYNAME_CLONE</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_BINARY_SERIALIZATION</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_COM_INTEROP</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILE_IN_TESTS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CONSOLE_BUFFERWIDTH</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CONSTRAINED_EXECUTION</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CHARSET_AUTO</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CODEDOM</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CODETASKFACTORY</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_CONSOLE_FALLBACK</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTURES</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_DOTNETVERSION</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_ENVIRONMENT_SYSTEMDIRECTORY</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_FILE_TRACKER</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_FUSION_COMPAREASSEMBLYIDENTITY</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_GAC</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_GET_COMMANDLINE</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_HANDLE_SAFEWAITHANDLE</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_HANDLEREF</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_HTTP_LISTENER</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_INSTALLED_MSBUILD</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_MEMORYSTREAM_GETBUFFER</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_OSVERSION</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_PARALLEL_BUILD</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_PERFORMANCE_COUNTERS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_PFX_SIGNING</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_REFLECTION_EMIT_DEBUG_INFO</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_REGISTRY_TOOLSETS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_REGISTRY_SDKS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_REGISTRYHIVE_DYNDATA</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_RESGEN</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_RESOURCE_EXPOSURE</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_RESX_RESOURCE_READER</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_RUN_EXE_IN_TESTS</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_SECURITY_PERMISSIONS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_SECURITY_PRINCIPAL_WINDOWS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_SPECIAL_FOLDERS</DefineConstants>
    <FeatureSpecialFolders>true</FeatureSpecialFolders>
    <DefineConstants>$(DefineConstants);FEATURE_STRING_INTERN</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_STRONG_NAMES</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_SYSTEM_CONFIGURATION</DefineConstants>
    <FeatureSystemConfiguration Condition="'$(MonoBuild)' != 'true'">true</FeatureSystemConfiguration>
    <DefineConstants>$(DefineConstants);FEATURE_TASK_GENERATERESOURCES</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_TASKHOST</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_THREAD_ABORT</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_THREAD_CULTURE</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_THREAD_PRIORITY</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_MULTIPLE_TOOLSETS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_TYPE_INVOKEMEMBER</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_TYPE_GETINTERFACE</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_VARIOUS_EXCEPTIONS</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_XAML_TYPES</DefineConstants>
    <FeatureXamlTypes>true</FeatureXamlTypes>
    <DefineConstants>$(DefineConstants);FEATURE_XML_SOURCE_URI</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_XML_LOADPATH</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_XML_SCHEMA_VALIDATION</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_XMLTEXTREADER</DefineConstants>
    <DefineConstants>$(DefineConstants);FEATURE_DEBUGGER</DefineConstants>
    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_DEBUG_LAUNCH</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants Condition="'$(MonoBuild)'=='true'">$(DefineConstants);MONO</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(NetCoreSurface)' == 'true'">

    <!-- Indicates whether CultureInfo has setters for the CurrentCulture and CurrentUICulture properties.
         If not, then the corresponding properties on Thread (which aren't in .NET Core) need to be used. -->
    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_SETTERS</DefineConstants>

    <DefineConstants>$(DefineConstants);FEATURE_PROCESSSTARTINFO_ENVIRONMENT</DefineConstants>
  </PropertyGroup>

  <!-- Change define constants as needed -->
  <PropertyGroup Condition="'$(MsbuildDebugger)' == 'true' AND '$(MonoBuild)' != 'true'">
    <DefineConstants>$(DefineConstants);FEATURE_MSBUILD_DEBUGGER</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetPlatformIdentifier)' == 'Windows_NT' or '$(MonoBuild)' == 'true'">
    <DefineConstants>$(DefineConstants);FEATURE_WIN32_REGISTRY</DefineConstants>
  </PropertyGroup>

  <!-- Setup some common paths -->
  <PropertyGroup>
    <CommonPath>$(SourceDir)Common\src</CommonPath>
    <CommonTestPath>$(SourceDir)Common\tests</CommonTestPath>
  </PropertyGroup>

  <!-- Setup the default output and intermediate paths -->
  <PropertyGroup>
    <PlatformTarget>AnyCPU</PlatformTarget>

    <BaseOutputPath>$(BinDir)</BaseOutputPath>
    <BaseOutputPathWithConfig>$([System.IO.Path]::Combine($(BaseOutputPath),$(Configuration)))$([System.IO.Path]::DirectorySeparatorChar)</BaseOutputPathWithConfig>
    <BaseOutputPathWithConfig Condition="'$(Platform)' != 'AnyCPU'">$([System.IO.Path]::Combine($(BaseOutputPath)$(Platform),$(TargetPlatformIdentifier),$(Configuration)))$([System.IO.Path]::DirectorySeparatorChar)</BaseOutputPathWithConfig>
    <OutputPath>$([System.IO.Path]::Combine($(BaseOutputPathWithConfig),"Output"))$([System.IO.Path]::DirectorySeparatorChar)</OutputPath>

    <BaseIntermediateOutputPath>$(BaseOutputPath)obj$([System.IO.Path]::DirectorySeparatorChar)</BaseIntermediateOutputPath>
    <IntermediateOutputPath>$([System.IO.Path]::Combine($(BaseIntermediateOutputPath)$(MSBuildProjectName),$(Configuration)))$([System.IO.Path]::DirectorySeparatorChar)</IntermediateOutputPath>
    <IntermediateOutputPath Condition="'$(Platform)' != 'AnyCPU'">$([System.IO.Path]::Combine($(BaseIntermediateOutputPath)$(MSBuildProjectName),$(Platform),$(Configuration)))$([System.IO.Path]::DirectorySeparatorChar)</IntermediateOutputPath>

    <!-- The TestPath seems to be used by Microsoft.DotNet.BuildTools targets. It does not seem to affect the MSBuild build in any way -->
    <TestPath>$(TestWorkingDir)$([System.IO.Path]::Combine($(MSBuildProjectName),$(Configuration)))$([System.IO.Path]::DirectorySeparatorChar)</TestPath>
    <TestPath Condition="'$(Platform)' != 'AnyCPU'">$([System.IO.Path]::Combine($(TestWorkingDir)$(MSBuildProjectName),$(Platform),$(Configuration)))$([System.IO.Path]::DirectorySeparatorChar)</TestPath>
    <BypassFrameworkInstallChecks>true</BypassFrameworkInstallChecks>

    <DeploymentDirName>$(TargetPlatformIdentifier)_Deployment</DeploymentDirName>
    <TestDeploymentDirName>$(DeploymentDirName)_Test</TestDeploymentDirName>

    <DeploymentDir>$([System.IO.Path]::Combine($(BaseOutputPath), $(Configuration), $(DeploymentDirName)))$([System.IO.Path]::DirectorySeparatorChar)</DeploymentDir>
    <TestDeploymentDir>$([System.IO.Path]::Combine($(BaseOutputPath), $(Configuration), $(TestDeploymentDirName)))$([System.IO.Path]::DirectorySeparatorChar)</TestDeploymentDir>
  </PropertyGroup>
</Project>
